<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/web-services
		http://www.springframework.org/schema/web-services/web-services-2.0.xsd">
	<!-- 
		http://www.springframework.org/schema/web-services
		http://www.springframework.org/schema/web-services/web-services-2.0.xsd" -->
	
	<context:component-scan base-package="br.com.ledbass.budgetControl" />
	<!-- Mapping the authentication interceptor class -->
	<!-- commented until the control classes are coded 
	<mvc:interceptors>
		<bean class="br.com.ledbass.budgetControl.controller.AuthInterceptor" />
	</mvc:interceptors>-->
	
	<!-- Mapping the folder for .css files-->
	<mvc:resources mapping="/resources/**" location="/WEB-INF/resources/"
		cache-period="31556926"/>
	
	<!-- Mapping the folder for .css files-->
	<mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/"
		cache-period="31556926"/>
		
	<!-- Mapping the folder for .css files-->
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/"
		cache-period="31556926"/>
	
	<!-- Mapping the folder for .js (javascript) files -->
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/"
		cache-period="31556926"/>
<mvc:annotation-driven>
    <mvc:message-converters register-defaults="true">
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <property name="objectMapper">
                <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                    <property name="serializationInclusion">
                        <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                    </property>
                </bean>
            </property>
        </bean>
    </mvc:message-converters>
</mvc:annotation-driven>
	
	<!-- Mapping the webpages -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- This resolves messages from resource bundles for different locales --> 
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="/WEB-INF/messages" />
        <property name="fallbackToSystemLocale" value="false" />
    </bean>
    
    <!-- To validate the posted add employee form -->
    <bean id="userValidator" class="br.com.ledbass.budgetControl.validator.UserValidator" />
    
    <!-- This produces a container-managed EntityManagerFactory; 
    	 rather than application-managed EntityManagerFactory as in case of 
    	 LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
	
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="br.com.ledbass.budgetControl" />
      
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
      	   Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">create</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <prop key="hibernate.show_sql"></prop>
         </props>
      </property>
   </bean>
 
   <!-- Simple implementation of the standard JDBC DataSource interface, 
   		configuring the plain old JDBC DriverManager via bean properties -->
   <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver" />
      <property name="url" value="jdbc:mysql://localhost:3306/uvercenter" />
      <property name="username" value="root" />
      <property name="password" value="root" />
   </bean>
   <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
    	JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean>
       <!-- responsible for registering the necessary Spring components that power
   		 annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
   <tx:annotation-driven />
</beans>